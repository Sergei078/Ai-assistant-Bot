from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove
from aiogram.utils.chat_action import ChatActionSender
from dotenv import load_dotenv
from Telegram_Bot import bot
from aiogram.enums import ChatAction
from Buttons import menu_kb
from FSM import FSMFillForm
from Speechkit import speech_to_text, text_to_speech, is_stt_block_limit, stt_symbols_db_to_text
from GPT import promt_gpt
from database import TotalGptTokensAdd, TotalGptTokensInfo, TtsSymbolsInfo, MessageInfo
from Tokenizer import count_tokens

load_dotenv()
router = Router()


@router.message(F.text == '–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µüó£')
async def voice_input_message(message: Message, state: FSMContext):
    await state.set_state(FSMFillForm.voice_message)
    await message.answer('–ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ \n'
                         '—Å –≤–æ–ø—Ä–æ—Å–æ–º.', reply_markup=ReplyKeyboardRemove())


@router.message(FSMFillForm.voice_message)
async def voice_message_handler_message(message: Message, state: FSMContext):
    try:
        await state.update_data(voice=message.voice.file_id)
        data = await state.get_data()
        user_id = message.chat.id
        info_tokens = TotalGptTokensInfo()
        result_tokens = await info_tokens.total_gpt_tokens_user(user_id)
        await info_tokens.close()
        info_tts = TtsSymbolsInfo()
        result_tts = await info_tts.tts_symbols_user(user_id)
        await info_tokens.close()
        if result_tokens is None or result_tokens < 0:
            result_tokens = 0
        if result_tts is None or result_tts < 0:
            result_tts = 0
        if int(result_tokens) > 0 and int(result_tts) > 0:
            sender = ChatActionSender(
                bot=message.bot,
                chat_id=message.chat.id,
                action=ChatAction.UPLOAD_VOICE,
            )
            async with sender:
                file_info = await bot.get_file(data['voice'])
                file = await bot.download_file(file_info.file_path)
                with open('user_voice.ogg', 'wb') as f:
                    f.write(file.read())
                duration_user = message.voice.duration
                result_info = await is_stt_block_limit(user_id=user_id, duration=duration_user)
                if result_info == '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' or result_info == '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
                    await message.answer(result_info, reply_markup=menu_kb)
                else:
                    with open('user_voice.ogg', 'rb') as audio_file:
                        audio_data = audio_file.read()
                    voice_speechkit = await speech_to_text(audio_data)
                    if voice_speechkit != '–ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞':
                        gpt_response = await promt_gpt(voice_speechkit)
                        if gpt_response != '–û—à–∏–±–∫–∞':
                            tokenizer = await count_tokens(voice_speechkit + gpt_response)
                            save_tokens = TotalGptTokensAdd()
                            await save_tokens.add_total_gpt_tokens(result_tokens - tokenizer, user_id)
                            await save_tokens.close()
                            result_text = await text_to_speech(gpt_response)
                            if result_text != '–ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞':
                                audio = FSInputFile('result_audio.ogg')
                                await stt_symbols_db_to_text(user_id, voice_speechkit)
                                await stt_symbols_db_to_text(user_id, gpt_response)
                                await message.answer_voice(audio, reply_markup=menu_kb)
                            else:
                                await message.answer('–ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!', reply_markup=menu_kb)
                        else:
                            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ \n'
                                                 '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏!', reply_markup=menu_kb)
                    else:
                        await message.answer('–ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!', reply_markup=menu_kb)
        else:
            await message.answer('–ó–∞–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!', reply_markup=menu_kb)
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!')
    finally:
        await state.clear()


@router.message(F.text == '–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µüìù')
async def text_input_message(message: Message, state: FSMContext):
    await state.set_state(FSMFillForm.text_message)
    await message.answer('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç\n'
                         '—Å–æ –≤–æ–ø—Ä–æ—Å–æ–º.', reply_markup=ReplyKeyboardRemove())


@router.message(FSMFillForm.text_message)
async def text_message_handler_message(message: Message, state: FSMContext):
    try:
        await state.update_data(text=message.text)
        data = await state.get_data()
        user_id = message.chat.id
        info_tokens = TotalGptTokensInfo()
        result_tokens = await info_tokens.total_gpt_tokens_user(user_id)
        await info_tokens.close()
        if result_tokens is None or result_tokens < 0:
            result_tokens = 0
        if int(result_tokens) > 0:
            gpt_response = await promt_gpt(data['text'])
            if gpt_response != '–û—à–∏–±–∫–∞':
                await message.answer(gpt_response, reply_markup=menu_kb)
                await stt_symbols_db_to_text(user_id, data['text'])
                await stt_symbols_db_to_text(user_id, gpt_response)
                tokenizer = await count_tokens(data['text'] + gpt_response)
                save_tokens = TotalGptTokensAdd()
                await save_tokens.add_total_gpt_tokens(result_tokens - tokenizer, user_id)
                await save_tokens.close()
            else:
                await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ \n'
                                     '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏!', reply_markup=menu_kb)
        else:
            await message.answer('–ó–∞–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!', reply_markup=menu_kb)
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!')
    finally:
        await state.clear()


@router.message(F.text == '–í—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞')
async def message_user_message(message: Message):
    try:
        user_id = message.chat.id
        text_db = MessageInfo()
        result_text = await text_db.select_message(user_id)
        await text_db.close()
        if result_text is None:
            await message.answer('–ü—É—Å—Ç–æ')
        else:
            await message.answer(result_text)
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!')
